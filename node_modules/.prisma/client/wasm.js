
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  read: 'read',
  link: 'link',
  createdAt: 'createdAt'
};

exports.Prisma.RolePackageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  roleName: 'roleName',
  singleListingPrice: 'singleListingPrice',
  totalPrice: 'totalPrice',
  durationDays: 'durationDays',
  listingLimit: 'listingLimit',
  features: 'features',
  image: 'image',
  imagePublicId: 'imagePublicId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  avatar: 'avatar',
  avatarPublicId: 'avatarPublicId',
  phone: 'phone',
  bio: 'bio',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  previousRole: 'previousRole',
  role: 'role',
  isAdmin: 'isAdmin',
  status: 'status',
  resetCode: 'resetCode',
  resetCodeExpiration: 'resetCodeExpiration',
  flagged: 'flagged',
  flagReason: 'flagReason',
  isNotificationEnabled: 'isNotificationEnabled',
  isTwoFactorEnabled: 'isTwoFactorEnabled',
  twoFactorTempToken: 'twoFactorTempToken',
  twoFactorTempExp: 'twoFactorTempExp',
  unSubscribeNewsletterIds: 'unSubscribeNewsletterIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reputationScore: 'reputationScore',
  reputationHistory: 'reputationHistory'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rolePackageId: 'rolePackageId',
  durationDays: 'durationDays',
  listingLimit: 'listingLimit',
  useListing: 'useListing',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  isPaused: 'isPaused',
  isExpired: 'isExpired',
  message: 'message',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  verifiedBy: 'verifiedBy',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userRoleId: 'userRoleId',
  amount: 'amount',
  durationDays: 'durationDays',
  listingLimit: 'listingLimit',
  currency: 'currency',
  status: 'status',
  method: 'method',
  stripeId: 'stripeId',
  isTransactionPurchase: 'isTransactionPurchase',
  invoiceUrl: 'invoiceUrl',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  deviceInfo: 'deviceInfo',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  reviewerId: 'reviewerId',
  targetUserId: 'targetUserId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HeroBannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  image: 'image',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketTrendsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  day: 'day',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MortageToolsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ctaName: 'ctaName',
  ctaLink: 'ctaLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrivacyPolicyScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermsOfUseScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuyingGuidesScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellingTipsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketInsightsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketAnalysisScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PressScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  image: 'image',
  imagePublicId: 'imagePublicId',
  category: 'category',
  categorySlug: 'categorySlug',
  tags: 'tags',
  location: 'location',
  isFeatured: 'isFeatured',
  authorName: 'authorName',
  authorImage: 'authorImage',
  authorImagePublicId: 'authorImagePublicId',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailConfigurationScalarFieldEnum = {
  id: 'id',
  emailMailer: 'emailMailer',
  emailHost: 'emailHost',
  emailPort: 'emailPort',
  emailUserName: 'emailUserName',
  emailPassword: 'emailPassword',
  emailEncryption: 'emailEncryption',
  emailFromName: 'emailFromName',
  emailAddress: 'emailAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StripeConfigurationScalarFieldEnum = {
  id: 'id',
  stripeKey: 'stripeKey',
  stripeSecret: 'stripeSecret',
  stripeMethod: 'stripeMethod',
  stripeWebhookSecret: 'stripeWebhookSecret',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellPageBannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  image: 'image',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellTypesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  items: 'items',
  image: 'image',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellerResourcesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  image: 'image',
  imagePublicId: 'imagePublicId',
  items: 'items',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DevelopmentPlatformScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  iosLink: 'iosLink',
  androidLink: 'androidLink',
  image: 'image',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  price: 'price',
  country: 'country',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  latitude: 'latitude',
  longitude: 'longitude',
  neighborhood: 'neighborhood',
  views: 'views',
  type: 'type',
  property: 'property',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  size: 'size',
  lotSize: 'lotSize',
  yearBuilt: 'yearBuilt',
  hoaFees: 'hoaFees',
  leaseLength: 'leaseLength',
  furnished: 'furnished',
  deposit: 'deposit',
  moveInDate: 'moveInDate',
  amenities: 'amenities',
  garage: 'garage',
  basement: 'basement',
  fireplace: 'fireplace',
  pool: 'pool',
  isForeclosure: 'isForeclosure',
  isNewConstruction: 'isNewConstruction',
  pet: 'pet',
  utilities: 'utilities',
  income: 'income',
  school: 'school',
  bus: 'bus',
  restaurant: 'restaurant',
  images: 'images',
  description: 'description',
  listingStatus: 'listingStatus',
  listingType: 'listingType',
  userId: 'userId',
  userName: 'userName',
  userAvatar: 'userAvatar',
  userEmail: 'userEmail',
  status: 'status',
  flagged: 'flagged',
  reportedBy: 'reportedBy',
  flagReason: 'flagReason',
  flagStatus: 'flagStatus',
  flaggedAt: 'flaggedAt',
  isSold: 'isSold',
  soldPrice: 'soldPrice',
  soldFeedback: 'soldFeedback',
  soldAt: 'soldAt',
  isRent: 'isRent',
  rentPrice: 'rentPrice',
  rentFeedback: 'rentFeedback',
  rentAt: 'rentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  propertyId: 'propertyId',
  createdAt: 'createdAt'
};

exports.Prisma.PropertyViewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  propertyId: 'propertyId',
  viewedAt: 'viewedAt'
};

exports.Prisma.PropertyTourRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  propertyId: 'propertyId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  tourTimes: 'tourTimes',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.PropertyContactUserRequestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  message: 'message',
  userId: 'userId',
  propertyId: 'propertyId',
  createdAt: 'createdAt'
};

exports.Prisma.ContactUserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  subject: 'subject',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.GetEstimateScalarFieldEnum = {
  id: 'id',
  email: 'email',
  createdAt: 'createdAt'
};

exports.Prisma.FaqsScalarFieldEnum = {
  id: 'id',
  question: 'question',
  slug: 'slug',
  answer: 'answer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactInformationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  email2: 'email2',
  phone: 'phone',
  phone2: 'phone2',
  address: 'address',
  address2: 'address2',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialNetworkScalarFieldEnum = {
  id: 'id',
  facebookLink: 'facebookLink',
  twitterLink: 'twitterLink',
  linkedinLink: 'linkedinLink',
  instagramLink: 'instagramLink',
  youtubeLink: 'youtubeLink',
  dribbleLink: 'dribbleLink',
  whatsappNumber: 'whatsappNumber',
  telegramLink: 'telegramLink',
  snapchatLink: 'snapchatLink',
  tiktokLink: 'tiktokLink',
  threadsLink: 'threadsLink',
  pinterestLink: 'pinterestLink',
  redditLink: 'redditLink',
  githubLink: 'githubLink',
  websiteLink: 'websiteLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteConfigurationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  copyRights: 'copyRights',
  logo: 'logo',
  logoPublicId: 'logoPublicId',
  favicon: 'favicon',
  faviconPublicId: 'faviconPublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsletterScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subject: 'subject',
  content: 'content',
  type: 'type',
  segment: 'segment',
  status: 'status',
  date: 'date',
  recipients: 'recipients',
  openRate: 'openRate',
  clickRate: 'clickRate',
  unsubscribeRate: 'unsubscribeRate'
};

exports.Prisma.MortgageRateScalarFieldEnum = {
  id: 'id',
  type: 'type',
  rate: 'rate',
  loanType: 'loanType',
  creditScore: 'creditScore',
  homePurpose: 'homePurpose',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.RoleName = exports.$Enums.RoleName = {
  homeowner_landlord: 'homeowner_landlord',
  agent_broker: 'agent_broker',
  property_manager: 'property_manager'
};

exports.RolePackageStatus = exports.$Enums.RolePackageStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.Status = exports.$Enums.Status = {
  active: 'active',
  inactive: 'inactive',
  pending: 'pending'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  buy: 'buy',
  rent: 'rent'
};

exports.PropertyCategory = exports.$Enums.PropertyCategory = {
  apartment: 'apartment',
  house: 'house',
  condo: 'condo',
  townhome: 'townhome',
  multiFamily: 'multiFamily',
  land: 'land',
  room: 'room',
  duplex: 'duplex'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  active: 'active',
  inactive: 'inactive',
  sold: 'sold',
  archived: 'archived'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.PropertyTourRequestStatus = exports.$Enums.PropertyTourRequestStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  Notification: 'Notification',
  RolePackage: 'RolePackage',
  User: 'User',
  UserRole: 'UserRole',
  Transaction: 'Transaction',
  Session: 'Session',
  Review: 'Review',
  HeroBanner: 'HeroBanner',
  MarketTrends: 'MarketTrends',
  MortageTools: 'MortageTools',
  PrivacyPolicy: 'PrivacyPolicy',
  TermsOfUse: 'TermsOfUse',
  BuyingGuides: 'BuyingGuides',
  SellingTips: 'SellingTips',
  MarketInsights: 'MarketInsights',
  MarketAnalysis: 'MarketAnalysis',
  Press: 'Press',
  Blog: 'Blog',
  EmailConfiguration: 'EmailConfiguration',
  StripeConfiguration: 'StripeConfiguration',
  SellPageBanner: 'SellPageBanner',
  SellTypes: 'SellTypes',
  SellerResources: 'SellerResources',
  DevelopmentPlatform: 'DevelopmentPlatform',
  Property: 'Property',
  Bookmark: 'Bookmark',
  PropertyView: 'PropertyView',
  PropertyTourRequest: 'PropertyTourRequest',
  PropertyContactUserRequest: 'PropertyContactUserRequest',
  ContactUser: 'ContactUser',
  GetEstimate: 'GetEstimate',
  Faqs: 'Faqs',
  ContactInformation: 'ContactInformation',
  SocialNetwork: 'SocialNetwork',
  SiteConfiguration: 'SiteConfiguration',
  Newsletter: 'Newsletter',
  MortgageRate: 'MortgageRate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
