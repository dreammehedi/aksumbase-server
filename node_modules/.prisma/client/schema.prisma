// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/d/accelerate

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// notification
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  message   String
  type      String // 'info', 'success', 'warning', 'error'
  read      Boolean  @default(false)
  link      String? // Optional link to redirect when clicked
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// role package
model RolePackage {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  roleName     RoleName
  price        Float
  durationDays Int
  features     String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userRoles    UserRole[]
}

// users
model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  username              String
  email                 String    @unique
  password              String
  avatar                String?
  avatarPublicId        String?
  phone                 String?
  bio                   String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  previousRole          String?
  role                  String    @default("user")
  isAdmin               Boolean   @default(false)
  status                Status    @default(pending)
  resetCode             String?
  resetCodeExpiration   DateTime? @default(now())
  flagged               Boolean?  @default(false)
  flagReason            String?
  isNotificationEnabled Boolean   @default(true)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorTempToken    String?
  twoFactorTempExp      DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  reputationScore   Int      @default(0)
  reputationHistory Json?

  // Relations
  notifications              Notification[]
  userRoles                  UserRole[]
  sessions                   Session[]
  property                   Property[]
  Bookmark                   Bookmark[]
  PropertyView               PropertyView[]
  PropertyTourRequest        PropertyTourRequest[]
  PropertyContactUserRequest PropertyContactUserRequest[]
  transactions               Transaction[]

  reviewsGiven    Review[] @relation("UserReviewsGiven")
  reviewsReceived Review[] @relation("UserReviewsReceived")
}

// user status
enum Status {
  active
  inactive
  pending
}

// user role name
enum RoleName {
  homeowner_landlord
  agent_broker
  // loan_officer
  property_manager
}

// user role
model UserRole {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  rolePackageId String    @db.ObjectId
  startDate     DateTime?
  endDate       DateTime?
  isActive      Boolean   @default(false)
  isPaused      Boolean   @default(false)
  isExpired     Boolean   @default(false)
  message       String?
  isVerified    Boolean   @default(false)
  verifiedAt    DateTime?
  verifiedBy    String?
  createdAt     DateTime  @default(now())

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  rolePackage  RolePackage   @relation(fields: [rolePackageId], references: [id])
  transactions Transaction[]
}

//  transaction
model Transaction {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  userRoleId String   @db.ObjectId // ✅ No @unique here
  amount     Float
  currency   String
  status     String
  method     String?
  stripeId   String   @unique
  invoiceUrl String?
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  userRole UserRole @relation(fields: [userRoleId], references: [id]) // ✅ One-to-many
}

// user login devices session
model Session {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  token      String
  deviceInfo String // user-agent + IP, etc.
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// user get review
model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewerId   String   @db.ObjectId
  targetUserId String   @db.ObjectId
  rating       Int
  comment      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // ✅ Add named relations to User
  reviewer   User @relation("UserReviewsGiven", fields: [reviewerId], references: [id])
  targetUser User @relation("UserReviewsReceived", fields: [targetUserId], references: [id])

  @@unique([reviewerId, targetUserId])
  @@index([reviewerId])
  @@index([targetUserId])
}

// hero banner
model HeroBanner {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  image         String
  imagePublicId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// market trends
model MarketTrends {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float
  day       Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Mortgage Tools
model MortageTools {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  ctaName     String
  ctaLink     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// privacy policy
model PrivacyPolicy {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// terms of use
model TermsOfUse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// buying guides
model BuyingGuides {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// selling tips
model SellingTips {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// market insights
model MarketInsights {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// market analysis
model MarketAnalysis {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// press
model Press {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// blog
model Blog {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  slug                String   @unique // for SEO-friendly URLs
  shortDescription    String
  longDescription     String
  image               String
  imagePublicId       String?
  category            String // e.g., "Buying", "Selling", "Investment", etc.
  categorySlug        String // for SEO-friendly URLs
  tags                String[] // e.g., ["home buying", "mortgage", "first-time buyers"]
  location            String? // optional, if the blog is about a specific region
  isFeatured          Boolean  @default(false)
  authorName          String
  authorImage         String
  authorImagePublicId String?
  views               Int      @default(0) // For analytics
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// email configuration
model EmailConfiguration {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  emailMailer     String
  emailHost       String
  emailPort       Int
  emailUserName   String
  emailPassword   String
  emailEncryption String
  emailFromName   String
  emailAddress    String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// stripe configuration
model StripeConfiguration {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeKey           String
  stripeSecret        String
  stripeMethod        String
  stripeWebhookSecret String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Sell page related models
model SellPageBanner {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  image         String
  imagePublicId String? // <-- Add this line
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SellTypes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  items         Json? // Each item will have { image, content }
  image         String
  imagePublicId String? // <-- Add this line
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Seller Resources
model SellerResources {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  image         String?
  imagePublicId String?
  items         Json? // Each item will have { image, content }
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// aksumbase developemnt platform
model DevelopmentPlatform {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  iosLink       String
  androidLink   String
  image         String
  imagePublicId String? // <-- Add this line
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// property listig (working on mehedi)
model Property {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  // slug         String  @unique // for SEO-friendly URLs
  slug         String
  price        Float
  address      String?
  city         String?
  state        String?
  zip          String?
  latitude     String?
  longitude    String?
  neighborhood String?
  views        Int     @default(0) // For analytics

  type     PropertyType // buy, rent, sold
  property PropertyCategory // apartment, house, etc.

  bedrooms    Int?
  bathrooms   Int?
  size        Int?
  lotSize     Float?
  yearBuilt   Int?
  hoaFees     Int?
  leaseLength String?
  furnished   Boolean?
  deposit     Float?
  moveInDate  DateTime?

  amenities String[]
  garage    Boolean? @default(false)
  basement  Boolean? @default(false)
  fireplace Boolean? @default(false)
  pool      Boolean? @default(false)

  pet        String?
  utilities  String?
  income     String?
  school     String?
  bus        String?
  restaurant String?

  images      Json?
  description String

  listingStatus ListingStatus? // optional if you want to use it separately
  listingType   String

  userId     String  @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
  userName   String?
  userAvatar String?
  userEmail  String?

  status     PropertyStatus @default(pending)
  flagged    Boolean        @default(false)
  reportedBy String[]       @default([])
  flagReason String?
  flagStatus String?        @default("pending")
  flaggedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Bookmark                   Bookmark[]
  PropertyView               PropertyView[]
  PropertyTourRequest        PropertyTourRequest[]
  PropertyContactUserRequest PropertyContactUserRequest[]
}

// property type
enum PropertyType {
  buy
  rent
}

// property category
enum PropertyCategory {
  apartment
  house
  condo
  townhome
  multiFamily
  land
  room
  duplex
}

// property status
enum PropertyStatus {
  pending
  approved
  rejected
}

// listing status
enum ListingStatus {
  active
  inactive
  sold
  archived
}

// property bookmark
model Bookmark {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

// property view
model PropertyView {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId
  viewedAt   DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId]) // Each property only once per user
}

// property tour request
model PropertyTourRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId
  name       String
  email      String
  phone      String
  message    String?
  tourTimes  Json // Array of tour objects: [{ date, time }]
  createdAt  DateTime @default(now())

  user     User?    @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}

// property contact user request
model PropertyContactUserRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  email      String
  message    String
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
}

// contact user
model ContactUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

// get estimate
model GetEstimate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt DateTime @default(now())
}

// faqs
model Faqs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  slug      String   @unique // for SEO-friendly URLs
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// contact information
model ContactInformation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  email2    String?
  phone     String
  phone2    String?
  address   String
  address2  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// social network
model SocialNetwork {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  facebookLink   String?
  twitterLink    String?
  linkedinLink   String?
  instagramLink  String?
  youtubeLink    String?
  dribbleLink    String?
  whatsappNumber String?
  telegramLink   String?
  snapchatLink   String?
  tiktokLink     String?
  threadsLink    String?
  pinterestLink  String?
  redditLink     String?
  githubLink     String?
  websiteLink    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// site configuration
model SiteConfiguration {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  shortDescription String
  longDescription  String?
  logo             String
  logoPublicId     String?
  favicon          String
  faviconPublicId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
