
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  read: 'read',
  link: 'link',
  createdAt: 'createdAt'
};

exports.Prisma.RolePackageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  roleName: 'roleName',
  price: 'price',
  durationDays: 'durationDays',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rolePackageId: 'rolePackageId',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  isPaused: 'isPaused',
  isExpired: 'isExpired',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  avatar: 'avatar',
  avatarPublicId: 'avatarPublicId',
  phone: 'phone',
  bio: 'bio',
  role: 'role',
  isAdmin: 'isAdmin',
  status: 'status',
  resetCode: 'resetCode',
  resetCodeExpiration: 'resetCodeExpiration',
  flagged: 'flagged',
  flagReason: 'flagReason',
  isTwoFactorEnabled: 'isTwoFactorEnabled',
  twoFactorTempToken: 'twoFactorTempToken',
  twoFactorTempExp: 'twoFactorTempExp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reputationScore: 'reputationScore',
  reputationHistory: 'reputationHistory'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  deviceInfo: 'deviceInfo',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  userId: 'userId',
  postId: 'postId',
  status: 'status',
  reportedBy: 'reportedBy',
  reportReason: 'reportReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  reason: 'reason',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.HeroBannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  image: 'image',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketTrendsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  day: 'day',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MortageToolsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ctaName: 'ctaName',
  ctaLink: 'ctaLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrivacyPolicyScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermsOfUseScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuyingGuidesScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellingTipsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketInsightsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketAnalysisScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PressScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  image: 'image',
  imagePublicId: 'imagePublicId',
  category: 'category',
  categorySlug: 'categorySlug',
  tags: 'tags',
  location: 'location',
  isFeatured: 'isFeatured',
  authorName: 'authorName',
  authorImage: 'authorImage',
  authorImagePublicId: 'authorImagePublicId',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailConfigurationScalarFieldEnum = {
  id: 'id',
  emailMailer: 'emailMailer',
  emailHost: 'emailHost',
  emailPort: 'emailPort',
  emailUserName: 'emailUserName',
  emailPassword: 'emailPassword',
  emailEncryption: 'emailEncryption',
  emailFromName: 'emailFromName',
  emailAddress: 'emailAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellerResourcesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  image: 'image',
  imagePublicId: 'imagePublicId',
  items: 'items',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DevelopmentPlatformScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  iosLink: 'iosLink',
  androidLink: 'androidLink',
  image: 'image',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  price: 'price',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  latitude: 'latitude',
  longitude: 'longitude',
  neighborhood: 'neighborhood',
  views: 'views',
  type: 'type',
  property: 'property',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  size: 'size',
  lotSize: 'lotSize',
  yearBuilt: 'yearBuilt',
  hoaFees: 'hoaFees',
  leaseLength: 'leaseLength',
  furnished: 'furnished',
  deposit: 'deposit',
  moveInDate: 'moveInDate',
  amenities: 'amenities',
  garage: 'garage',
  basement: 'basement',
  fireplace: 'fireplace',
  pool: 'pool',
  pet: 'pet',
  utilities: 'utilities',
  income: 'income',
  school: 'school',
  bus: 'bus',
  restaurant: 'restaurant',
  images: 'images',
  description: 'description',
  listingStatus: 'listingStatus',
  listingType: 'listingType',
  userId: 'userId',
  userName: 'userName',
  userAvatar: 'userAvatar',
  userEmail: 'userEmail',
  status: 'status',
  flagged: 'flagged',
  aiFlagged: 'aiFlagged',
  reportedBy: 'reportedBy',
  flagReason: 'flagReason',
  flagStatus: 'flagStatus',
  flaggedAt: 'flaggedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Status = exports.$Enums.Status = {
  active: 'active',
  inactive: 'inactive',
  pending: 'pending'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  buy: 'buy',
  rent: 'rent'
};

exports.PropertyCategory = exports.$Enums.PropertyCategory = {
  apartment: 'apartment',
  house: 'house',
  condo: 'condo',
  townhome: 'townhome',
  multiFamily: 'multiFamily',
  land: 'land',
  room: 'room',
  duplex: 'duplex'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  active: 'active',
  inactive: 'inactive',
  sold: 'sold',
  archived: 'archived'
};

exports.ListingType = exports.$Enums.ListingType = {
  agent: 'agent',
  fsbo: 'fsbo',
  foreclosure: 'foreclosure',
  new_construction: 'new_construction'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  blocked: 'blocked'
};

exports.Prisma.ModelName = {
  Notification: 'Notification',
  RolePackage: 'RolePackage',
  UserRole: 'UserRole',
  User: 'User',
  Session: 'Session',
  Review: 'Review',
  AuditLog: 'AuditLog',
  HeroBanner: 'HeroBanner',
  MarketTrends: 'MarketTrends',
  MortageTools: 'MortageTools',
  PrivacyPolicy: 'PrivacyPolicy',
  TermsOfUse: 'TermsOfUse',
  BuyingGuides: 'BuyingGuides',
  SellingTips: 'SellingTips',
  MarketInsights: 'MarketInsights',
  MarketAnalysis: 'MarketAnalysis',
  Press: 'Press',
  Blog: 'Blog',
  EmailConfiguration: 'EmailConfiguration',
  SellerResources: 'SellerResources',
  DevelopmentPlatform: 'DevelopmentPlatform',
  Property: 'Property'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
