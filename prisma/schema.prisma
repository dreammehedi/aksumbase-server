// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/d/accelerate

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  message   String
  type      String // 'info', 'success', 'warning', 'error'
  read      Boolean  @default(false)
  link      String? // Optional link to redirect when clicked
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  notifications     Notification[]
  username          String         @unique
  email             String         @unique
  password          String
  avatar            String?
  role              String         @default("user")
  isAdmin           Boolean        @default(false)
  phone             String?
  bio               String?
  status            String         @default("active")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  posts             Post[]
  reputationScore   Int            @default(0)
  reputationHistory Json?
  flagged           Boolean?       @default(false)
  flagReason        String?
  reviews           Review[]
  auditLogs         AuditLog[]
}

enum Status {
  active
  inactive
  pending
}

model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  price         Float
  address       String?
  city          String?
  state         String?
  zip           String?
  latitude      String?
  longitude     String?
  neighborhood  String?
  type          String
  property      String
  bedrooms      Int
  bathrooms     Int
  size          Int
  lotSize       Float?
  yearBuilt     Int?
  hoaFees       Int?
  listingStatus String?
  listingType   String? // e.g. 'agent', 'fsbo', 'foreclosure', 'new_construction'
  leaseLength   String?
  furnished     Boolean?
  deposit       Float?
  moveInDate    DateTime?
  amenities     String[]
  garage        Boolean?  @default(false)
  basement      Boolean?  @default(false)
  fireplace     Boolean?  @default(false)
  pool          Boolean?  @default(false)
  pet           String?
  utilities     String?
  income        String?
  school        String?
  bus           String?
  restaurant    String?
  images        String[]
  description   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userName      String?
  userAvatar    String?
  userEmail     String?
  status        String    @default("pending")
  flagged       Boolean   @default(false)
  aiFlagged     Boolean   @default(false)
  reportedBy    String[]  @default([])
  flagReason    String?
  flagStatus    String?   @default("pending")
  flaggedAt     DateTime?
  Review        Review[]
}

enum Type {
  buy
  rent
  sold
}

enum Property {
  apartment
  house
  condo
  townhome
  multiFamily
  land
  room
  duplex
}

model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  rating       Int
  comment      String
  userId       String   @db.ObjectId
  postId       String?  @db.ObjectId // Make postId optional
  status       String   @default("pending") // pending, approved, rejected
  reportedBy   String[] @default([]) // Array of user IDs who reported
  reportReason String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  post         Post?    @relation(fields: [postId], references: [id]) // Make post relation optional
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  reason    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}



// hero banner
model HeroBanner {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  image          String
  imagePublicId  String?  // <-- Add this line
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


// market trends
model MarketTrends {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  price  Float
  day    Int
  status String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


// Mortgage Tools
model MortageTools {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  description String
  ctaName String
  ctaLink String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}



// privacy policy
model PrivacyPolicy {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// terms of use
model TermsOfUse {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}